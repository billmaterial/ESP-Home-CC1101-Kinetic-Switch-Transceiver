substitutions:
  name: # Change to your device name
  friendly_name: Kinetic Switch Reciever

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2024.6.0
  name_add_mac_suffix: false
  project:
    name: esphome.web
    version: dev

# Based on: https://github.com/dbuezas/esphome-cc1101
  includes:
    - cc1101.h
  libraries:
    - SPI
    - "SmartRC-CC1101-Driver-Lib"

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:
#level: VERBOSE
  baud_rate: 115200
  deassert_rts_dtr: true

# Enable Home Assistant API
api:
  encryption:
    key: #Add you API key

# Allow Over-The-Air updates
ota:
- platform: esphome
  password: !secret ota_password

# Allow provisioning Wi-Fi via serial
improv_serial:

wifi:
#  power_save_mode: none
  fast_connect: off
  networks:
  - ssid: !secret wifi_ssid
    password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: # Change to your ap name
    password: # Change to ap password 

# In combination with the `ap` this allows the user
# to provision wifi credentials to the device via WiFi AP.
captive_portal:

dashboard_import:
  package_import_url: github://esphome/example-configs/esphome-web/esp32.yaml@main
  import_full_config: true

# To have a "next url" for improv serial
web_server:

# Wifi Sensor
sensor:
  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: "WiFi Signal dB"
    id: wifi_signal_db
    update_interval: 10s
    entity_category: "diagnostic"

  - platform: custom
    lambda: |-
      auto my_sensor = new CC1101(

        // esp8266 example
        //D5, // SCK
        //D6, // MISO
        //D7, // MOSI
        //D3, // CSN
        //D1, // GDO0

        // esp32 example
        18, // SCK
        19, // MISO
        23, // MOSI
        5, // CSN
        4, // GDO0

        200, // bandwidth_in_khz
        433.92, // freq_in_mhz
        id(transmitter) // id of remote_transmitter
      );
      App.register_component(my_sensor);
      return {my_sensor};
    sensors:
      id: transciver
      internal: true

# Example configuration entry
text_sensor:
  - platform: wifi_info
    ip_address:
      name: ESP IP Address
    ssid:
      name: ESP Connected SSID
      id: esp_connected_ssid
    bssid:
      name: ESP Connected BSSID
    mac_address:
      name: ESP Mac Wifi Address
    scan_results:
      name: ESP Latest Scan Results

# Status Light entry
light:
  - platform: status_led
    name: "Switch state"
    id: switch_state
    pin: 
      number: 2
      mode: OUTPUT

# 433MHz Transmitter
remote_transmitter:
  - id: transmitter
    pin:
      number: 4 # This is GDO0
      allow_other_uses: true
    carrier_duty_percent: 100%
    
# 433MHz Receiver
remote_receiver:
  - id: receiver
    pin:
      number: 4 # This is GDO0
      allow_other_uses: true
      # on the esp8266 use any of D1,D2,D5,D6,D7,Rx
      # Don't use D3,D4,D8,TX, boot often fails.
      # Can't be D0 or GPIO17 b/c no interrupts
    tolerance: 50%  #25% default, tune to get working
    filter: 10us    #50us default, tune to get working
    idle: 10ms      #10ms default, tune to get working
    # Enable dump to see raw data. Goto https://dbuezas.github.io/esphome-remote_receiver-oscilloscope/ to view data to use for the code [] segments
    #dump:
    #  - raw

# 433MHz RF Controls
binary_sensor:
  - platform: remote_receiver
    name: "Rocker DG-1"
    receiver_id: receiver
    raw:
      code: [54, -1016, 117, -22, 40, -94, 37, -97, 104, -30, 104, -30, 104, -29, 38, -96, 104, -29, 37, -97, 37, -96, 104, -29, 104, -29, 38, -96, 37, -96, 37, -97, 37, -96, 37, -96, 38, -96, 104, -29, 37, -96, 38, -96, 37, -96, 37, -96, 104, -30, 37, -1028]
    filters:
      - delayed_off: 1000ms

  - platform: remote_receiver
    name: "Rocker DG-2"
    receiver_id: receiver
    raw:
      code: [52, -1018, 116, -21, 45, -91, 37, -95, 107, -30, 103, -30, 103, -30, 104, -29, 38, -96, 37, -96, 37, -96, 37, -97, 103, -30, 37, -96, 104, -30, 104, -29, 37, -96, 38, -96, 104, -29, 37, -96, 38, -96, 37, -96, 37, -96, 38, -96, 103, -30, 37, -1028]
    filters:
      - delayed_off: 1000ms

  - platform: remote_receiver
    name: "Switch DG-1"
    receiver_id: receiver
    raw:
      code: [53, -1017, 115, -22, 41, -92, 42, -91, 108, -30, 37, -92, 108, -29, 105, -25, 41, -92, 108, -29, 38, -96, 37, -96, 37, -96, 37, -97, 103, -30, 104, -30, 104, -29, 104, -30, 37, -92, 108, -29, 104, -29, 38, -96, 103, -30, 37, -97, 37, -92, 37, -1027]
    filters:
      - delayed_off: 1000ms

  - platform: remote_receiver
    name: "Switch DG-2"
    receiver_id: receiver
    raw:
      code: [45, -1019, 116, -26, 37, -93, 41, -96, 104, -29, 37, -96, 104, -30, 104, -29, 37, -96, 104, -30, 37, -96, 37, -96, 38, -96, 37, -96, 104, -29, 104, -30, 104, -29, 104, -30, 37, -96, 104, -29, 104, -29, 38, -96, 37, -96, 104, -30, 37, -96, 37, -1028]
    filters:
      - delayed_off: 1000ms

  - platform: remote_receiver
    name: "Switch SG-1"
    receiver_id: receiver
    raw:
      code: [54, -1012, 116, -22, 47, -90, 108, -25, 105, -29, 38, -92, 41, -92, 108, -29, 38, -92, 108, -25, 108, -26, 108, -25, 108, -25, 109, -25, 108, -25, 108, -26, 41, -92, 42, -92, 107, -26, 108, -25, 108, -25, 42, -92, 42, -92, 41, -92, 107, -26, 41, -1028]
    filters:
      - delayed_off: 1000ms

button:
  - platform: template
    name: "Rocker DG-1"
    on_press:
      - lambda: get_cc1101(transciver).beginTransmission();
      - remote_transmitter.transmit_raw:
          transmitter_id: transmitter
          code: [54, -1016, 117, -22, 40, -94, 37, -97, 104, -30, 104, -30, 104, -29, 38, -96, 104, -29, 37, -97, 37, -96, 104, -29, 104, -29, 38, -96, 37, -96, 37, -97, 37, -96, 37, -96, 38, -96, 104, -29, 37, -96, 38, -96, 37, -96, 37, -96, 104, -30, 37]
          repeat:
            times: 4
            wait_time: 1000us
      - lambda: get_cc1101(transciver).endTransmission();

  - platform: template
    name: "Rocker DG-2"
    on_press:
      - lambda: get_cc1101(transciver).beginTransmission();
      - remote_transmitter.transmit_raw:
          transmitter_id: transmitter
          code: [52, -1018, 116, -21, 45, -91, 37, -95, 107, -30, 103, -30, 103, -30, 104, -29, 38, -96, 37, -96, 37, -96, 37, -97, 103, -30, 37, -96, 104, -30, 104, -29, 37, -96, 38, -96, 104, -29, 37, -96, 38, -96, 37, -96, 37, -96, 38, -96, 103, -30, 37]
          repeat:
            times: 4
            wait_time: 1000us
      - lambda: get_cc1101(transciver).endTransmission();

  - platform: template
    name: "Switch DG-1"
    on_press:
      - lambda: get_cc1101(transciver).beginTransmission();
      - remote_transmitter.transmit_raw:
          transmitter_id: transmitter
          code: [53, -1017, 115, -22, 41, -92, 42, -91, 108, -30, 37, -92, 108, -29, 105, -25, 41, -92, 108, -29, 38, -96, 37, -96, 37, -96, 37, -97, 103, -30, 104, -30, 104, -29, 104, -30, 37, -92, 108, -29, 104, -29, 38, -96, 103, -30, 37, -97, 37, -92, 37]
          repeat:
            times: 4
            wait_time: 1000us
      - lambda: get_cc1101(transciver).endTransmission();

  - platform: template
    name: "Switch DG-2"
    on_press:
      - lambda: get_cc1101(transciver).beginTransmission();
      - remote_transmitter.transmit_raw:
          transmitter_id: transmitter
          code: [45, -1019, 116, -26, 37, -93, 41, -96, 104, -29, 37, -96, 104, -30, 104, -29, 37, -96, 104, -30, 37, -96, 37, -96, 38, -96, 37, -96, 104, -29, 104, -30, 104, -29, 104, -30, 37, -96, 104, -29, 104, -29, 38, -96, 37, -96, 104, -30, 37, -96, 37]
          repeat:
            times: 4
            wait_time: 1000us
      - lambda: get_cc1101(transciver).endTransmission();

  - platform: template
    name: "Switch SG-1"
    on_press:
      - lambda: get_cc1101(transciver).beginTransmission();
      - remote_transmitter.transmit_raw:
          transmitter_id: transmitter
          code: [54, -1012, 116, -22, 47, -90, 108, -25, 105, -29, 38, -92, 41, -92, 108, -29, 38, -92, 108, -25, 108, -26, 108, -25, 108, -25, 109, -25, 108, -25, 108, -26, 41, -92, 42, -92, 107, -26, 108, -25, 108, -25, 42, -92, 42, -92, 41, -92, 107, -26, 41]
          repeat:
            times: 4
            wait_time: 1000us
      - lambda: get_cc1101(transciver).endTransmission();
